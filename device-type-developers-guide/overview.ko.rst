:Authors:
	Kim Kyung Min
	(Sungkyunkwan Univ. College of Software)
:Version: 1.5 of 2018/06/03

=======
개요
=======

SmartThings는 개발자들이 사용중인 기기의 세부적인 사항들을 신경쓰지 않는 애플리케이션을 개발할 수 있도록 기기의 고유한 기능과 속성들로부터 독자적인 추상화를 제공합니다. 예를 들어 이 아키텍쳐에는 무선으로 제어가 가능한 많은 "스위치"들이 있습니다. "스위치"란 켜지거나 꺼질수 있는 모든 기기들입니다.

SmartApp는 기기의 가상화된 표현과 상호 작용하면, 기기의 기능을 바탕으로 어떤 특정 작업을 지원하는지 알게 됩니다. "스위치" 기능을 가지고 있는 기기는 반드시 "켜기" 그리고 "끄기" 작업을 모두 지원해야 합니다. 여기서, 모든 스위치들은 동일하며, 실제로 어떤 종류의 스위치가 포함되어 있는지는 SmartApp이 신경쓰지 않습니다.

기기의 가상화된 표현은 Device Handler라고 불립니다.

주의

이러한 추상화는 SmartThings 플랫폼의 성공적인 작동과 유연성에 있어 핵심 사항입니다. 구조적으로, device handler는 일반적인 기능과 기기와 실제로 통신하기 위해 사용되는 기기 혹은 프로토콜이 특정된 인터페이스 간의 다리 역할을 해줍니다. 

아래 나오는 그림은 device handler가 SmartThings 구조에서 어디에 위치하는지를 표현합니다.

.. image:: ../img/device-types/smartthings-architecture.png

위의 예시에서, Device Handler("스위치" 기능을 구현하는)는 기기로부터 프로토콜이 명시된 상태 메세지를 받아 파싱하고, 그 메세지들을 표준화된 "events"로 바꾸는 역할을 합니다. 또한, "on" 이나 "off" 같은 표준화된 명령들을 받아 그것들이 기기로 보내져서 원하는 행동을 할 수 있도록 프로토콜이 명시된 명령으로 바꾸기도 합니다.

예를 들어,  Z-wave가 호환되는 on-off 스위치에서, 기기가 "on"이나 "off" 상태를 보고하기 위해 사용하는 수신 상태 메세지는 아래와 같습니다:

============= ============================
**기기 명령** **프로토콜-명시 명령 메시지**
============= ============================
켜기           command: 2003, payload: FF
끄기           command: 2003, payload: 00
============= ============================

반면에 해당 장치의 SmartThings 플랫폼에 보고되는 장치의 상태는 그저 "on" 이나 "off"입니다.

비슷하게, SmartApp이나 모바일 앱이 스위치 기기에 "켜기" 혹은 "끄기" 명령을 보내면, Device Handler에게 보내지는 명령은 간단히 "켜기" 혹은 "끄기"일 뿐입니다. Device Handler는 반드시 이런 간단한 명령을 기기로 보내져 원하는 액션을 하게 할 수 있는 프로토콜이 명시된 메세지로 바뀌여야 합니다. 

아래 표는 Device Handler에 의해 Z-Wave 스위치로 보내진 실제 Z-Wave 명령입니다. 
 
============= ============================
기기 명령       프로토콜-명시 명령 메시지
============= ============================
켜기           2001FF
끄기           200100
============= ============================

==========================================================================================


================
핵심 개념
================
Device Handler가 어떻게 작동하는지 이해하기 위해, 약간의 핵심 개념들이 설명되어야 합니다.

능력(Capabilities)
---------------------
Capabilities란 기기가 허락하는 상호작용입니다. 그들은 SmartApps들이 지원되는 능력들을 기반으로 기기와 작동할 수 잇도록 추상화된 층을 제공하고, 특정 제조사나 모델에 국한되지 않습니다. 

"스위치"의 기능을 예로 생각해 봅시다. 단순한 용어로써, 스위치란 키고 끌 수 있는 장치입니다. 스위치는 전통적인 느낌에서의 스위치일 수도 있고(예를 들어 벽에 붙어있는 불 스위치), 연결된 전구, 혹은 심지어 음악 플레이어 일 수도 있습니다. 이런 모든 독특한 기기들은 Device Handler가 있고, 그 Device Handler들은 "스위치" 능력을 지원합니다. 이것은 SmartApps이 "스위치" 능력만을 지원하는 기기를 요구하도록 해주고 따라서 "스위치"라는 모델이며 다른 제조사에서 만들어진 다양한 기기들과 작동 할 수 있게 해줍니다. SmartApp은 그 장치가 "켜기" 와 "끄기" 명령(더 많은 명령들이 아래에 있습니다)을 지원한다는 사실만을 가지고, 그 장치의 세부적인 쓰임은 무시한채 상호작용 할 수 있게 해줍니다.

이 코드는 SmartApp이 "스위치" 기능을 지원하는 장치와 어떻게 상호작용할지를 묘사한 것입니다:

.. code-block:: groovy
        
        preferences() {
            section("Control this switch"){
                input "theSwitch", "capability.switch", multiple: false
            }
        }

        def someEventHandler(evt) {
           if (someCondition) {
            theSwitch.on()
         } else {
          theSwitch.off()
          }
        
         // "스위치 켜짐" 혹은 "스위치 꺼짐"을 로그에 기록합니다
         log.debug "switch is ${theSwitch.currentSwitch}"
        }

위의 예시는 SmartApp이 "스위치" 기능을 지원하는 장치에게 어떻게 요청을 보내는지를 묘사합니다. SmartApp을 설치할때, 사용자는 "스위치"기능을 지원하는 기기 중 어떤 것이든 선택할 수 있습니다 - 뱍에붙어있는 불 전등 스위치, 연결된 전구들, 음악 플레이어, 혹은 "스위치"기능을 기원하는 어떠한 기기들. 

'capabilities_taxonomy_'에 들어가보면 지원되는 모든 기능들이 적혀 있습니다.

.. _capabilities_taxonomy: https://github.com/18-1-SKKU-OSS/2018-1-OSS-L4-2-/blob/master/capabilities-reference.rst#capabilities-reference

Device Handler는 일반적으로 하나 이상의 기능을 지원합니다. Hue Bulb를 위한 Device Handler는 "스위치" 기능 뿐만 아니라 "색 조절" 기능도 지원해야 합니다. 이는 SmartApps가 매우 유연하게 작동할 수 있게 합니다. 

명령들과 특성들에 대해 한번 깊게 얘기해 봅시다!

명령들
========

명령어란 기기가 할 수 있는 액션들입니다. 예를 들어, 스위치는 켜고 끌 수 있으며, 잠금장치는 잠그거나 열 수 있고, 밸브는 열거나 닫을 수 있습니다. 위의 예시에서, 우리는``on()`` 이나 ``off()`` 메소드를 불러서 스위치에게 "켜기" 혹은 "끄기" 명령을 날리는 것에 대해 이야기 했었습니다. 

명령은 Device Handler의 메소드로서 실행이 됩니다. 
기기가 capability를 지원할 때, 그 기기는 지원되는 모든 명령 메소드를 실행할 수 있어야 합니다. 

특성들
======

특성들은 기기의 특정 상태 값을 나타냅니다. 
예를 들어, 스위치 기능은 "스위치"라는 특성은 "켜기"나 "끄기" 라는 값들과 함께 정의합니다. 

위의 예시에서, 우리는 "스위치" 특성의 값을 "current<attributeName>" (``currentSwitch``)를 이용해서 가져옵니다. 

특성 값이란 특성의 이름이 Event의 이름과 같은 이벤트들이 만들어질 때 세팅되고, 특성 값은 그 Event의 값입니다. 이것은 `Parse and Events documentation <parse.html#parse-events-and-attributes>`__ 에서 더 자세히 설명됩니다. 

명령들과 같이 기기가 기능을 지원할때, 그 기기는 모든 기능들의 특성들이 실행될 수 있음을 보증해야한다. 

작동 장치와 센서
================

:ref:`capabilities_taxonomy` 여기를 보면, 특성들이나 명령들을 가지고 있지않은 두개의 기능들을 발견할 것입니다 - "Actuator"와 "Sensor". 
이러한 기능들은 "marker" 혹은 "tagging" 기능입니다 (만약 Java에 익숙하시다면, Cloneable interface에 대해 생각해보세요 - 얘는 어떠한 상태나 행동을 정의하지 않습니다).

"Actuator" 기능은 기기가 명령어(commands)를 가지고 있음을 정의합니다. 
"Sensor" 기능은 기기가 특성(attributes)을 가지고 있음을 정의합니다. 

만약 Device Handler를 작성하고 있고, 만약 당신의 기기가 commands나 특성을 가지고 있다면, "Actuator"기능이나 "Sensor"기능을 지원해볼 가장 좋은 연습 기회 입니다. 
이는 왜 대부분의 Device Handler들이 이런 기능들 중  하나 혹은 둘 모두를 지원하는 이유입니다.


